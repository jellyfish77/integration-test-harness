
# Set the initial context factory class
# The fully qualified class name of the factory class that will create the initial context. 
# An initial context is the starting point for naming operations. 
# For ActiveMQ (Points to class in activemq-all-5.15.0.jar):
java.naming.factory.initial = org.apache.activemq.jndi.ActiveMQInitialContextFactory


# The configuration information for the service provider to use. The value 
# should contain a URL string. For more information, see the Java API documentation for javax.naming.Context.PROVIDER_URL.
# For ActiveMQ:
#java.naming.provider.url = tcp://ubu-activemq:61616
java.naming.provider.url = tcp://192.168.1.120:61616


########################## Active MQ #######################################
# ActiveMQ only... (as defined by ActiveMQInitialContextFactory)
# ActiveMQ uses a single connection factory name for all destinations (topics and queues): ConnectionFactory
# You can either specify the above name, or...
# The following property can be used to specify custom JNDI name(s) the above connection factory should appear as:
# (i.e. you can use these names in your java JNDI lookups and they will alias "ConnectionFactory") 
connectionFactoryNames = connectionFactory, queueConnectionFactory, topicConnectionFactory

# Queues...
# register some queues as JNDI names in JNDI using the form:
# queue.[jndiName] = [Physical Destination Name]
#queue.MyQueue = example.MyQueue

# Topics...
# register some topics as JNDI names in JNDI using the form:
# topic.[jndiName] = [Physical Destination Name]
# (ActiveMQInitialContextFactory looks for properties begining with "topic.")
# For ActiveMQ:
queue.jmsINQ = TEST.IN.Q
queue.jmsOUTQ = TEST.OUT.Q

queue.mapMessageINQ = TEST.MapMessage.IN.Q 
queue.mapMessageOUTQ = TEST.MapMessage.OUT.Q

queue.IIBCDCatalogINQ = IIB.cdCatalog.IN.Q
queue.IIBCDCatalogOUTQ = IIB.cdCatalog.OUT.Q

queue.IIBinvoiceINQ = IIB.Invoice.IN.Q
queue.IIBinvoiceOUTQ = IIB.Invoice.OUT.Q

############################################################################